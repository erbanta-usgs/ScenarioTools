using System;
using System.Collections.Generic;
using System.IO;
using System.Windows.Forms;

using ScenarioTools.Util;

namespace ScenarioTools.ModflowReaders
{
    public class NamefileInfo : ICloneable
    {
        #region Fields

        private string _namefile;
        private List<NameFileEntry> _items;

        #endregion Fields

        #region Constructors

        public NamefileInfo()
        {
            _items = new List<NameFileEntry>();
            _namefile = "";
        }

        public NamefileInfo(string namefilePath)
        {
            _items = ModflowReader.GetNameFileEntries(namefilePath);
            _namefile = namefilePath;
        }

        #endregion Constructors

        #region Properties

        public string Namefile
        {
            get
            {
                return _namefile;
            }
            set
            {
                _namefile = value;
            }
        }

        public List<NameFileEntry> Items
        {
            get
            {
                return _items;
            }
            set
            {
                Items = value;
            }
        }

        #endregion Properties

        #region Methods

        public void AssignFrom(NamefileInfo sourceNamefileInfo)
        {
            this._namefile = sourceNamefileInfo.Namefile;
            this.Items.Clear();
            for (int i = 0; i < sourceNamefileInfo.Items.Count; i++)
            {
                NameFileEntry newNfe = new NameFileEntry(sourceNamefileInfo.Items[i]);
                this.Items.Add(newNfe);
            }
        }

        public object Clone()
        {
            NamefileInfo nfInfo = new NamefileInfo();
            nfInfo.Namefile = _namefile;
            for (int i = 0; i < _items.Count; i++)
            {
                NameFileEntry newNameFileEntry = new NameFileEntry(_items[i]);
                nfInfo.Items.Add(newNameFileEntry);
            }
            return nfInfo;
        }

        public bool ContainsUnknownAccess()
        {
            for (int i = 0; i < this.Items.Count; i++)
            {
                if (Items[i].Access == InOutAccess.Unknown)
                {
                    return true;
                }
            }
            return false;
        }

        /// <summary>
        /// Returns one file entry of type specified
        /// </summary>
        /// <param name="fileType">MODFLOW-recognized file type</param>
        /// <returns></returns>
        public NameFileEntry GetEntry(string fileType)
        {
            string type = fileType.ToUpper();
            for (int i = 0; i < _items.Count; i++)
            {
                if (_items[i].Type == type)
                {
                    return _items[i];
                }
            }
            return null;
        }

        public NameFileEntry GetEntry(int unitNum)
        {
            for (int i = 0; i < _items.Count; i++)
            {
                if (_items[i].Unit == unitNum)
                {
                    return _items[i];
                }
            }
            return null;
        }

        public string GetDirectory()
        {
            return Path.GetDirectoryName(Namefile);
        }

        public int GetUnusedUnit()
        {
            int unit = 0;
            int maxUnit = 7;
            for (int i = 0; i < _items.Count; i++)
            {
                if (_items[i].Unit > maxUnit)
                {
                    maxUnit = _items[i].Unit;
                }
            }
            unit = maxUnit + 1;
            // Don't use units reserved by MODFLOW-2000 or MODFLOW-2005
            if (unit >= 96 && unit <= 99)
            {
                unit = 100;
            }
            return unit;
        }

        /// <summary>
        /// Repopulates Items list
        /// </summary>
        /// <param name="namefilePath">Name file absolute path</param>
        public void Read(string namefilePath)
        {
            _items.Clear();
            _namefile = namefilePath;
            _items = ModflowReader.GetNameFileEntries(namefilePath);
        }

        public bool Write(string scenarioID, string scenarioDescription)
        {
            return Write(_namefile, scenarioID, scenarioDescription);
        }

        public bool Write(string namefilePath, string scenarioID, string scenarioDescription)
        {
            try
            {
                _namefile = namefilePath;
                List<string> commentLines = StringUtil.MakeList(scenarioDescription, 65, "# ");
                int numCommentLines = commentLines.Count;
                string[] contents = new string[Items.Count + numCommentLines + 4];
                contents[0] = "# MODFLOW name file generated by Scenario Manager";
                contents[1] = "# Scenario: '" + scenarioID + "'";
                contents[2] = "#";
                int index = 2;
                for (int i = 0; i < numCommentLines; i++)
                {
                    index++;
                    contents[index] = commentLines[i];
                }
                index++;
                contents[index] = "#";
                for (int i = 0; i < Items.Count; i++)
                {
                    index++;
                    contents[index] = Items[i].MakeNamefileLine(scenarioID);
                }
                // Write file by invoking ScenarioTools.Util.FileUtil.WriteFile
                FileUtil.WriteFile(_namefile, contents);
                if (Items.Count == 0)
                {
                    MessageBox.Show("In NameFileInfo.Write, Items.Count is 0 for scenario " + scenarioID);
                    return false;
                }
                return true;
            }
            catch
            {
                MessageBox.Show("In NameFileInfo.Write, exception caught");
                return false;
            }
        }

        #endregion Methods


    }
}
